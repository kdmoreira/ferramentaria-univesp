// <auto-generated />
using System;
using Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Infra.Data.Migrations
{
    [DbContext(typeof(FerramentariaContext))]
    [Migration("20220917214141_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Domain.Models.Afericao", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<Guid?>("AtualizadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("atualizado_por");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<Guid>("CriadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("criado_por");

                    b.Property<DateTime?>("DataUltima")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_ultima");

                    b.Property<Guid>("FerramentaID")
                        .HasColumnType("uuid")
                        .HasColumnName("ferramenta_id");

                    b.Property<int>("IntervaloDias")
                        .HasColumnType("int")
                        .HasColumnName("intervalo_dias");

                    b.HasKey("ID")
                        .HasName("pk_afericoes");

                    b.ToTable("Afericoes");
                });

            modelBuilder.Entity("Domain.Models.Categoria", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<Guid?>("AtualizadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("atualizado_por");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<Guid>("CriadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("criado_por");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar")
                        .HasColumnName("descricao");

                    b.HasKey("ID")
                        .HasName("pk_categorias");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            ID = new Guid("5138f09b-7dc6-4e06-a983-c182e6d7d173"),
                            Ativo = true,
                            CriadoEm = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CriadoPor = new Guid("00000000-0000-0000-0000-000000000000"),
                            Descricao = "Ferramenta"
                        },
                        new
                        {
                            ID = new Guid("61858a59-e022-4ace-8531-8db2d62b739e"),
                            Ativo = true,
                            CriadoEm = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CriadoPor = new Guid("00000000-0000-0000-0000-000000000000"),
                            Descricao = "Dispositivo"
                        },
                        new
                        {
                            ID = new Guid("70daebeb-22d5-4b70-8052-9211b92b9552"),
                            Ativo = true,
                            CriadoEm = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CriadoPor = new Guid("00000000-0000-0000-0000-000000000000"),
                            Descricao = "Instrumento"
                        },
                        new
                        {
                            ID = new Guid("1d16e4d4-59ac-438f-b484-fa097d3be8f3"),
                            Ativo = true,
                            CriadoEm = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CriadoPor = new Guid("00000000-0000-0000-0000-000000000000"),
                            Descricao = "Equipamento"
                        });
                });

            modelBuilder.Entity("Domain.Models.Colaborador", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<Guid?>("AtualizadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("atualizado_por");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar")
                        .HasColumnName("cpf");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("cargo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<Guid>("CriadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("criado_por");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("email");

                    b.Property<string>("Empresa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("empresa");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("matricula");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("nome");

                    b.Property<int>("Perfil")
                        .HasColumnType("int")
                        .HasColumnName("perfil");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("sobrenome");

                    b.Property<Guid?>("SupervisorID")
                        .HasColumnType("uuid")
                        .HasColumnName("supervisor_id");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("telefone");

                    b.HasKey("ID")
                        .HasName("pk_colaboradores");

                    b.HasIndex("Matricula")
                        .IsUnique()
                        .HasDatabaseName("ix_colaboradores_matricula");

                    b.HasIndex("SupervisorID")
                        .HasDatabaseName("ix_colaboradores_supervisor_id");

                    b.ToTable("Colaboradores");

                    b.HasData(
                        new
                        {
                            ID = new Guid("c20cf935-802e-4dba-be10-14131ea6279a"),
                            Ativo = false,
                            CPF = "12345678912",
                            Cargo = "Admin",
                            CriadoEm = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CriadoPor = new Guid("00000000-0000-0000-0000-000000000000"),
                            Email = "N/A",
                            Empresa = "N/A",
                            Matricula = "000",
                            Nome = "Admin",
                            Perfil = 1,
                            Sobrenome = "Admin",
                            Telefone = "(00)0000-0000"
                        });
                });

            modelBuilder.Entity("Domain.Models.Emprestimo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<Guid?>("AtualizadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("atualizado_por");

                    b.Property<Guid>("ColaboradorID")
                        .HasColumnType("uuid")
                        .HasColumnName("colaborador_id");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<Guid>("CriadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("criado_por");

                    b.Property<DateTime>("DataDevolucao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_devolucao");

                    b.Property<DateTime>("DataEmprestimo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_emprestimo");

                    b.Property<Guid>("FerramentaID")
                        .HasColumnType("uuid")
                        .HasColumnName("ferramenta_id");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("observacao");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int")
                        .HasColumnName("quantidade");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("ID")
                        .HasName("pk_emprestimos");

                    b.HasIndex("ColaboradorID")
                        .HasDatabaseName("ix_emprestimos_colaborador_id");

                    b.HasIndex("FerramentaID")
                        .HasDatabaseName("ix_emprestimos_ferramenta_id");

                    b.ToTable("Emprestimos");
                });

            modelBuilder.Entity("Domain.Models.Ferramenta", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AfericaoID")
                        .HasColumnType("uuid")
                        .HasColumnName("afericao_id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<Guid?>("AtualizadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("atualizado_por");

                    b.Property<Guid>("CategoriaID")
                        .HasColumnType("uuid")
                        .HasColumnName("categoria_id");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("codigo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<Guid>("CriadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("criado_por");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("descricao");

                    b.Property<string>("Fabricante")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("fabricante");

                    b.Property<string>("Localizacao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("localizacao");

                    b.Property<string>("NumeroPatrimonial")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("numero_patrimonial");

                    b.Property<int>("QuantidadeDisponivel")
                        .HasColumnType("int")
                        .HasColumnName("quantidade_disponivel");

                    b.Property<int>("QuantidadeTotal")
                        .HasColumnType("int")
                        .HasColumnName("quantidade_total");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<double>("ValorCompra")
                        .HasColumnType("float")
                        .HasColumnName("valor_compra");

                    b.HasKey("ID")
                        .HasName("pk_ferramentas");

                    b.HasIndex("AfericaoID")
                        .IsUnique()
                        .HasDatabaseName("ix_ferramentas_afericao_id");

                    b.HasIndex("CategoriaID")
                        .HasDatabaseName("ix_ferramentas_categoria_id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasDatabaseName("ix_ferramentas_codigo");

                    b.ToTable("Ferramentas");
                });

            modelBuilder.Entity("Domain.Models.Reparo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<Guid?>("AtualizadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("atualizado_por");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<Guid>("CriadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("criado_por");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_fim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_inicio");

                    b.Property<Guid>("FerramentaID")
                        .HasColumnType("uuid")
                        .HasColumnName("ferramenta_id");

                    b.HasKey("ID")
                        .HasName("pk_reparos");

                    b.HasIndex("FerramentaID")
                        .HasDatabaseName("ix_reparos_ferramenta_id");

                    b.ToTable("Reparos");
                });

            modelBuilder.Entity("Domain.Models.Usuario", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<Guid?>("AtualizadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("atualizado_por");

                    b.Property<Guid>("ColaboradorID")
                        .HasColumnType("uuid")
                        .HasColumnName("colaborador_id");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<Guid>("CriadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("criado_por");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("login");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("senha");

                    b.Property<string>("Token")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar")
                        .HasColumnName("token");

                    b.HasKey("ID")
                        .HasName("pk_usuarios");

                    b.HasIndex("ColaboradorID")
                        .IsUnique()
                        .HasDatabaseName("ix_usuarios_colaborador_id");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasDatabaseName("ix_usuarios_login");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            ID = new Guid("bb9ac2c8-c7d4-4c21-b6cf-84419b12a810"),
                            Ativo = true,
                            ColaboradorID = new Guid("c20cf935-802e-4dba-be10-14131ea6279a"),
                            CriadoEm = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CriadoPor = new Guid("00000000-0000-0000-0000-000000000000"),
                            Login = "12345678912",
                            Role = 1,
                            Senha = "$2a$12$ti.QT85lj9IANHP8VfAue.X4yzVM458OqmCtR0d1zBp9yv4mK2CGC"
                        });
                });

            modelBuilder.Entity("Domain.Models.VerificacaoEmprestimo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<Guid?>("AtualizadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("atualizado_por");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<Guid>("CriadoPor")
                        .HasColumnType("uuid")
                        .HasColumnName("criado_por");

                    b.Property<DateTime>("UltimaVerificacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ultima_verificacao");

                    b.HasKey("ID")
                        .HasName("pk_verificacoes_emprestimos");

                    b.ToTable("VerificacoesEmprestimos");

                    b.HasData(
                        new
                        {
                            ID = new Guid("091e796b-5819-4fe3-8d45-38c86cec4e3b"),
                            Ativo = true,
                            CriadoEm = new DateTime(2022, 9, 17, 21, 41, 40, 134, DateTimeKind.Utc).AddTicks(4719),
                            CriadoPor = new Guid("00000000-0000-0000-0000-000000000000"),
                            UltimaVerificacao = new DateTime(2022, 9, 17, 21, 41, 40, 134, DateTimeKind.Utc).AddTicks(3676)
                        });
                });

            modelBuilder.Entity("Domain.Models.Colaborador", b =>
                {
                    b.HasOne("Domain.Models.Colaborador", "Supervisor")
                        .WithMany("Supervisionados")
                        .HasForeignKey("SupervisorID")
                        .HasConstraintName("fk_colaboradores_colaboradores_supervisor_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("Domain.Models.Emprestimo", b =>
                {
                    b.HasOne("Domain.Models.Colaborador", "Colaborador")
                        .WithMany("Emprestimos")
                        .HasForeignKey("ColaboradorID")
                        .HasConstraintName("fk_emprestimos_colaboradores_colaborador_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Ferramenta", "Ferramenta")
                        .WithMany("Emprestimos")
                        .HasForeignKey("FerramentaID")
                        .HasConstraintName("fk_emprestimos_ferramentas_ferramenta_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Colaborador");

                    b.Navigation("Ferramenta");
                });

            modelBuilder.Entity("Domain.Models.Ferramenta", b =>
                {
                    b.HasOne("Domain.Models.Afericao", "Afericao")
                        .WithOne("Ferramenta")
                        .HasForeignKey("Domain.Models.Ferramenta", "AfericaoID")
                        .HasConstraintName("fk_ferramentas_afericoes_afericao_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.Categoria", "Categoria")
                        .WithMany("Ferramentas")
                        .HasForeignKey("CategoriaID")
                        .HasConstraintName("fk_ferramentas_categorias_categoria_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Afericao");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Domain.Models.Reparo", b =>
                {
                    b.HasOne("Domain.Models.Ferramenta", "Ferramenta")
                        .WithMany("Reparos")
                        .HasForeignKey("FerramentaID")
                        .HasConstraintName("fk_reparos_ferramentas_ferramenta_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ferramenta");
                });

            modelBuilder.Entity("Domain.Models.Usuario", b =>
                {
                    b.HasOne("Domain.Models.Colaborador", "Colaborador")
                        .WithOne("Usuario")
                        .HasForeignKey("Domain.Models.Usuario", "ColaboradorID")
                        .HasConstraintName("fk_usuarios_colaboradores_colaborador_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Colaborador");
                });

            modelBuilder.Entity("Domain.Models.Afericao", b =>
                {
                    b.Navigation("Ferramenta");
                });

            modelBuilder.Entity("Domain.Models.Categoria", b =>
                {
                    b.Navigation("Ferramentas");
                });

            modelBuilder.Entity("Domain.Models.Colaborador", b =>
                {
                    b.Navigation("Emprestimos");

                    b.Navigation("Supervisionados");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Models.Ferramenta", b =>
                {
                    b.Navigation("Emprestimos");

                    b.Navigation("Reparos");
                });
#pragma warning restore 612, 618
        }
    }
}
